from typing import List
from datetime import datetime
from aiogram.dispatcher import FSMContext
from logic import Action, group_by_name

start = "lets go!"
start = {
    'ru' : '–ü–æ–µ—Ö–∞–ª–∏',
    'en' : "Let's go",
    'be' : "–ü–∞—á—ã–Ω–∞–µ–∏" 
}

menu_header = {
    'ru': "üìã<b>–ú–µ–Ω—é</b>üìã",
    'en': "üìã<b>Menu</b>üìã"
}

async def compose_menu(state: FSMContext, lang: str = 'en') -> str:
    text = f'{menu_header[lang]}\n\n'
    data = await state.get_data()
    act = Action.get_entity(data.get('curr_action'))
    if act:
        if lang == 'ru':
            return text + f"<i>–°–µ–π—á–∞—Å: <b>{act.name}</b> —É–∂–µ <b>{compose_time_delta(act.get_duration_secs(), lang)}</b></i>"
        else:
            return text + f"<i>Now: <b>{act.name}</b> for <b>{compose_time_delta(act.get_duration_secs(), lang)}</b></i>"
    return text + f"<i>{nothing_happens[lang]}</i>"


def compose_cats(categories: List[str], lang: str = 'en') -> str:
    if categories == None or len(categories) == 0:
        return no_custom_cats[lang]
    text = ''
    for i, cat in enumerate(categories):
        text += f"<b>{i+1}.</b> {cat}\n"
    return text

no_custom_cats = {
    'ru': "–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö",
    'en': "No custom categories"
}

ask_for_num = '–í–≤–æ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω–∞üóë'
ask_for_num = {
    'ru': "–í–≤–æ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω–∞üóë",
    'en': "Type <b>the name</b> of category to removeüóë"
}

ask_for_name = "–í–≤–æ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üìå"
ask_for_name = {
    'ru': "–í–≤–æ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üìå",
    'en': "Type <b>the name</b> of your custom categoryüìå"
}

added = '<i><b>–î–æ–±–∞–≤–ª–µ–Ω–æ‚òëÔ∏è</b></i>'
added = {
    'ru': "<i><b>–î–æ–±–∞–≤–ª–µ–Ω–æ‚òëÔ∏è</b></i>",
    'en': "<i><b>Added‚òëÔ∏è</b></i>"
}

removed = '<i><b>–£–¥–∞–ª–µ–Ω–æ‚òëÔ∏è</b></i>'
removed = {
    'ru': "<i><b>–£–¥–∞–ª–µ–Ω–æ‚òëÔ∏è</b></i>",
    'en': "<i><b>Removed‚òëÔ∏è</b></i>"
}

choose_action = 'üìù<b>–ß—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—à—å –¥–µ–ª–∞—Ç—å?</b>\n\n<i>–í—ã–±–∏—Ä–∞–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º</i>'
choose_action = {
    'ru': "üìù<b>–ß—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—à—å –¥–µ–ª–∞—Ç—å?</b>\n\n<i>–í—ã–±–∏—Ä–∞–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º</i>",
    'en': "üìù<b>What are you goint to start?</b>\n\n<i>Choose from categories below or type your one</i>"
}

def compose_started(name: str, start_datetime: datetime, lang: str = 'en') -> str:
    if lang == 'ru':
        return f"‚è≥ –ù–∞—á–∞—Ç–æ <b>{name}</b> –≤ {start_datetime.strftime('%H:%M:%S')}"
    else:
        return f"‚è≥ Started <b>{name}</b> at {start_datetime.strftime('%H:%M:%S')}"

def compose_finished(action: Action, lang: str = 'en') -> str:
    if lang == 'ru':
        return f"‚åõÔ∏è –û–∫–æ–Ω—á–µ–Ω–æ <b>{action.name}</b> —Å–ø—É—Å—Ç—è {compose_time_delta(action.get_duration_secs(), lang)}"
    else:
        return f"‚åõÔ∏è Finished <b>{action.name}</b> after {compose_time_delta(action.get_duration_secs(), lang)}"

def compose_confirmation(curr_action: Action, lang: str = 'en') -> str:
    if lang == 'ru':
        return f"–¢–æ—á–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å <b>{curr_action.name}?</b>"
    else:
        return f"Are you sure to finish <b>{curr_action.name}?</b>"

confirmed = '–°–¥–µ–ª–∞–Ω–æ'
confirmed = {
    'ru': "–°–¥–µ–ª–∞–Ω–æ",
    'en': "Done"
}

aborted = '–û—Ç–º–µ–Ω–µ–Ω–æ'
aborted = {
    'ru': "–û—Ç–º–µ–Ω–µ–Ω–æ",
    'en': "Aborted"
}

wrong_input = '–Ω–µ –ø–æ–Ω—è–ª ...\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ /start</i>'
wrong_input = {
    'ru': "–Ω–µ –ø–æ–Ω—è–ª ...\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ /start</i>",
    'en': "can't understand ...\n\n<i>Use buttons or /start</i>"
}

def compose_time_delta(secs: int, lang: str = 'en') -> str:
    text = ''
    if secs >= 60 * 60:
        text += f"{secs // (60 * 60)} {hour_name[lang]}  "
    if secs >= 60:
        text += f"{secs % (60 * 60) // 60} {min_name[lang]}  "
    text += f"{secs % 60} {sec_name[lang]}"
    return text

sec_name = {
    'ru': "—Å–µ–∫",
    'en': "sec"
}

min_name = {
    'ru': "–º–∏–Ω",
    'en': "¬†min"
}

hour_name = {
    'ru': "—á",
    'en': "h"
}

async def compose_today_stat(state: FSMContext, lang: str = 'en') -> str:
    data = await state.get_data()
    curr_action = data.get('curr_action')
    actions = data.get('actions')
    if curr_action:
        act = Action.get_entity(curr_action)
        if lang == 'ru':
            text = f"<i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å:</i>\n<b>{act.name}</b> —É–∂–µ {compose_time_delta(act.get_duration_secs(), lang)}"
        else:
            text = f"<i>Now:</i>\n<b>{act.name}</b> lasts for {compose_time_delta(act.get_duration_secs(), lang)}"
    else:
        text = str(Action.get_entity(curr_action)) if curr_action else nothing_happens[lang]

    if len(actions) == 0:
        text += '\n\n' + no_accomplished[lang]
    else:
        text += f'\n\n{accomplished_header[lang]}\n\n'
        text += table_header[lang]
        for action_str in actions:
            action = Action.get_entity(action_str)
            text += f"\n{action.start.time()} <b>| {action.name} |</b> {compose_time_delta(action.get_duration_secs(), lang)}"

    if curr_action:
        actions.append(curr_action)
    if len(actions) != 0:
        text += f"\n\n{total_the_day[lang]}\n\n"
        sorted_dict = sorted(group_by_name(actions).items(), key=lambda x: x[1], reverse=True)
        for name, secs in sorted_dict:
            text += f"<b>{name}: </b>{compose_time_delta(secs, lang)}\n"
    return text

total_the_day = {
    'ru': "<b><i>***–°—É–º–º–∞—Ä–Ω–æ –∑–∞ –¥–µ–Ω—å***</i></b>",
    'en': "<b><i>***During the day in total***</i></b>"
}

table_header = {
    'ru': "–ù–∞—á–∞–ª–æ  | –î–µ–π—Å—Ç–≤–∏–µ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    'en': "Start   | Action | Duration"
}

accomplished_header = {
    'ru': "<b><i>***–°–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ***</i></b>",
    'en': "<b><i>***Today finished***</i></b>"
}

no_accomplished = {
    'ru': "<i>–°–µ–≥–æ–¥–Ω—è –µ—â—ë –±–µ–∑ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π ((</i>",
    'en': "<i>There is no finished actions yet</i>"
}

nothing_happens = "<i>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç</i>"
nothing_happens = {
    'ru': "<i>–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç</i>",
    'en': "<i>You're doing nothing now</i>"
}

no_such_category = "<i>–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç</i>"
no_such_category= {
    'ru' : '<i>–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç</i>',
    'en' : '<i>No such categorie</i>'
}

help = {
    'ru' : """<b><i>–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å, –Ω–∞ —á—Ç–æ —É—Ö–æ–¥—è—Ç 24 —á–∞—Å–∞ –≤ —Ç–≤–æ–∏—Ö —Å—É—Ç–∫–∞—Ö</i></b>\n
<b>"–ù–∞—á–∞—Ç—å"</b> - –≤–∫–ª—é—á–∞–π, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—à—å –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ: —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫, –∏–≥—Ä–∞—Ç—å –∫ CS. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–∂–µ –Ω–∞—á–∞—Ç–æ, –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.\n
<b>"–ó–∞–∫–æ–Ω—á–∏—Ç—å"</b> - –µ—Å–ª–∏ —Ä–µ—à–∏–ª —á—Ç–æ-—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å. —É—à—ë–ª –≤ —Å–µ–±—è.\n
<b>"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"</b> - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–µ–ª–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏—Ö.\n
<b>"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è"</b> - –≤—Å–µ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É, –∞ —Ç–∞–∫–∂–µ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ.\n
<b>"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"</b> - –ø–∏—à–∏ @bot_deal, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–¥–µ—Å—å —É–≤–∏–¥–µ—Ç—å: –æ—Ç—á—ë—Ç –ø–æ –¥–Ω—è–º, –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é, –∞ —á—Ç–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö? –∞ –º–æ–∂–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º—É –º–º?""",

    'en' : """<b><i>This bot helps to keep track of how you spend your time during the day</i></b>\n
<b>"Start"</b> - choose when you start doing something new: learning English, cooking breakfast, playing CS. If something has already started, it will automatically finished.\n
<b>"Finish"</b> - if you decide to finish something and not start anything. Something you don't want to talk about or just staring ate the wall.\n
<b>"Categories"</b> - here you can manage the most frequent activities so that they appear as buttons when you decide to start something\n
<b>"Today stat"</b> - all your activities in order and  the total time spent on each one.\n
<b>"analytics"</b> - text @bot_deal to propose your ideas ans make it better"""}

in_development = {
    'ru' : '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 
    'en' : 'In progress'
}